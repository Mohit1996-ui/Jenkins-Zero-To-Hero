pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1' // Use the specified Docker image
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket for Docker commands
        }
    }
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out the code...'
                // Uncomment and use if needed
                // git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
            }
        }
        stage('Build and Test') {
            steps {
                echo 'Listing directory contents...'
                sh 'ls -ltr' // List files for verification
                echo 'Building the project...'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package' // Build project
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://3.110.210.9:9000" // SonarQube server URL
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    echo 'Running static code analysis...'
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}' // Static analysis
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "mohit290996/ultimate-cicd:${BUILD_NUMBER}" // Tag for the Docker image
                REGISTRY_CREDENTIALS = credentials('docker-cred') // Docker registry credentials
            }
            steps {
                script {
                    echo 'Building the Docker image...'
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .' // Build the Docker image
                    def dockerImage = docker.image("${DOCKER_IMAGE}") // Reference the Docker image
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") { // Authenticate to Docker registry
                        echo 'Pushing the Docker image to the registry...'
                        dockerImage.push() // Push the image
                    }
                }
            }
        }
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Jenkins-Zero-To-Hero" // Repository name
                GIT_USER_NAME = "Mohit1996-ui" // GitHub username
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    echo 'Updating deployment file...'
                    sh '''
                        git config user.email "abhishek.xyz@gmail.com"
                        git config user.name "Abhishek Veeramalla"
                        BUILD_NUMBER=${BUILD_NUMBER}
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml // Update the deployment file with the build number
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit" // Handle no changes gracefully
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main || echo "Push failed" // Handle push failure gracefully
                    '''
                }
            }
        }
    }
}
